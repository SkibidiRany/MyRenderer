TODO : 
-1	Add Input Field inheritance.   I don't want to add this
-1	ADD THREADS TO DRAWING LOGIC TO BOOST PERFORMANCE.  	FAILED - no can do


1	Add text on midpoint functionality:
	add:   DONE
	FIX DRAWING RECTANGLE INSTEAD OF TEXT BUG. DONE
	
1 	Add rotating using right mouse button.   	DONE


1 	This came back again"	FIX DRAWING RECTANGLE INSTEAD OF TEXT BUG. DONE", but this time it is only for DRAWING THE COORDS OF POINTS in shapes deriving from shape class.
					this is weird, I don't have time to look through it now. will need to fix it later.   DONE


1 	FIX: On left mouse button hold, all other points (NOT including Points deriving from shape class) change their color to the last color we got from the RGB inputs.  DONE


1	The code Needs HEAVY reactoring, it works but it is getting closer to being spaghetti, here is the architecture I am thinking about currently:
					# Global parameters in Utilities.h
					# Base functions in myFunctions.h
					# Base classes and interfaces in myClasses.h
					# InputFields.h and InputFields.cpp as is

1	Add flush screen drawings button. DONE


1	Add memory manager. DONE

1	Add drawLength for lines and drawcoords for Point constants

1 	Change input buttons to constants that I can change




1	Add moving points feature: given coordinates, we should be able to move the point in those coordinates depending on mouse cursor input. Keep in mind: only one point exists in our spatial hashing grid, we can use that.
This feature might need us to manually link PointManager and LineManager together, since moving a point should also move all lines connected to it. 
Current Idea: create a common manager that takes in both, and for each method, it calls the right methods in each, and when we move a point, we also move all lines connected to it using a similar approach to that we used in "RemoveAllLinesWithPoint()" (I forgot the exact name)
Additional planning: 
- Define PointLineManager class. make it inherit from IEachFrame and IDeletable and IFlushable. Done
- Initialize it in Initialize Managers, make its EachFrame function call PointManager and LineManager EachFrame, since it will now control them. Done
- Define the interfaces methods. Done
- Define the method "MovePointLines": Call PointManager::MovePoint, get the returned pair then call LineManager::MoveLinesWithPoint. Done
- Define the input methods, this will have to change when I integrate my own event system. Done

Changes to PointManager:			DONE
- Define the method "MovePoint": this method should take as an input (old, new), where old is the point we want to move and new is the point we want to move it to. One good looking implementation is just to do "remove(old); insert(new);" since we already deal with points existing in the same new point in the insert method.

Changes to LineManager:				DONE
- Define the method "MoveLinesWithPoint": this method should take as an input (old, new), where old is the point we want to move all lines connected to it, and new is the point we want to move the lines to. 

This approach comes up with 1 big problem: We need to use the spatial hashing grid in PointManager, so that LineManager can know if the point old and new intersect with any other point.
SOLVED:
- My current solution: in PointLineManager::MovePointLines, we call PointManager::MovePoint, and this method knows everything, since it needs the information about intersecting points in order to move the point correctly, so all we have to do is save the point intersecting with old and the point intersecting with new in a pair, and to just return the pair to PointLineManager, Then, we can just feed the pair to LineManager::MoveLinesWithPoint.  		
I think this would work great.

ALL DONE, BUT ONE MINOR ISSUE:
After adding the moving points and lines feature, I was greeted with another small bug: because I took the lines as static when I added the length text feature, when we move a line, the text draws at the old spot.
- Define UpdateMidPoint method in Line struct
- Update LineManager::MoveLinesWithPoint method: While moving lines, after changing one point of a lines, call UpdateMidPoint 		DONE


0 	Drawing 3d.

0 	Add Depth FOV, consider looking into why engines use point system (x,y,z,w) DONE
- add Vector4 class. 	DONE
- add Matrix4 class. 	DONE
 	
Add the math needed for perspective projection, and then all that's left to do is: 
- initialize the MatrixManager at the start. 	
- insert the needed matrices in main. 		
- apply all matrices to each point before drawing it.
look into making MatrixManager all static if possible, since we need to call it everytime we "DrawPoints", and camera translation will change the needed matrices, so we can't really save a copy in each class that uses it. Or can we?


0 	Event System. look into making it not need function input, else we can use templates.
- Data structure is a linked list of funcptr s for each signal.	
Main methods are:
	void Subscribe(funcptr, sig): Adds funcptr to the linked list of the signal sig.
	void UnSubscribe(funcptr, sig): Removes funcptr from the linked list of the signal sig.
	void invoke(sig): invokes all functions subscribed to signal sig.



1	Add scrollbar to decide which shape we want to draw, update ShapeManager accordingly:
 	1 DONE:	"ALMOST DONE: still need to respond to handle user selecting shape logic."

1	Add initialization to none to scrollbar

1	Add Time class, this class has to support the following:
	- Initialize() function : initializes the clock to the current time.
	- GetDeltaTime() function : returns the difference in time between the last frame and the current frame
	- Update() function : set the recent frame in the main loop, and then set the last frame time at the end of the main loop.
	- ElapsedTime() function : returns the time the program has been running.

1	Add Animation class, this class has to support the following:
	- Constructor takes in a duration and a function that we want to run for that duration (such as lerp)
	- Start function : starts the animation, calls f for the duration set.
	- Stop function : stops the animation.
	in private, we should save fields:
	- func : the function we want to run.
	- duration : the duration we want to run for.
	- isRunning : are we running?
	- thread : the thread we are running on.

1	Add Animator class, this class has to support the following:
	- Add(Animation a) function : Adds a given animation to its data structure.
<<<<<<< Updated upstream
	- Update(deltaTime) function : Calls all valid animations in its data structure.
	This class must remove an animation form its data structure when the animation finishes its work.
=======
	- Update(deltaTime) function : Updates all valid animations in its data structure.
	- CallAnimations() function : Calls all valid animations in its data structure.
	This class must remove an animation form its data structure when the animation finishes its work.



1	Add Lerp class, this class has to inherit from Animation class and has to support the following:
	- Constructor takes in two points (a,b) and a duration.
	- DoAnimation() function: Does the animation of lerping ("a + t * (b-a)")  
	, the animation should run from a to b in time = duration seconds.




0 	Add BackAndForth class, this class has to inherit from Animation class and has to support the following:
	- Constructor takes in two points (a,b) and a duration.
	- DoAnimation() function: Does the animation of lerping back and forth between a and b. ("a + t * (b-a)") 
	, the animation should run from a to b in time = duration seconds, and then keep going back and forth



0	Add .At() functionality: 
	I want to allow Starting animations at a predetermined time, for example, I want to implement a data structure X that allows the following:
	- X.At(Animation anim, float t) : calls anim at time = t.

	Basic requirements for the data structure:
	- insert(anim, t) : inserts anim to be called at time = t. 
	- Update() : iterates through and calls animations that need to be called. 
	Time complexity requirements:	
	insert : O(1).
	Update : O(k) where k is the amount of animations that we need to call.

	current (first) idea:
	Linked list that holds Animations ordered by time, Updates each frame, which iterates through all nodes that satisfy:
	callbackTime < currentTime, calls and then removes them from the list. 
	! insert O(n)
	! Update O(k)
	
	(second) idea:
	A linked list structure that supports threads with hand over hand algorithm, just like that in operating systems HW#3.
	same Time complexity as first idea just more efficient but more complex

	will have to look for better ideas in the future. 









