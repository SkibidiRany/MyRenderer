TODO : 
-1	Add Input Field inheritance.   I don't want to add this
-1	ADD THREADS TO DRAWING LOGIC TO BOOST PERFORMANCE.  	FAILED - no can do


1	Add text on midpoint functionality:
	add:   DONE
	FIX DRAWING RECTANGLE INSTEAD OF TEXT BUG. DONE
	
1 	Add rotating using right mouse button.   	DONE


1 	This came back again"	FIX DRAWING RECTANGLE INSTEAD OF TEXT BUG. DONE", but this time it is only for DRAWING THE COORDS OF POINTS in shapes deriving from shape class.
					this is weird, I don't have time to look through it now. will need to fix it later.   DONE


1 	FIX: On left mouse button hold, all other points (NOT including Points deriving from shape class) change their color to the last color we got from the RGB inputs.  DONE


1	The code Needs HEAVY reactoring, it works but it is getting closer to being spaghetti, here is the architecture I am thinking about currently:
					# Global parameters in Utilities.h
					# Base functions in myFunctions.h
					# Base classes and interfaces in myClasses.h
					# InputFields.h and InputFields.cpp as is

1	Add flush screen drawings button. DONE


1	Add memory manager. DONE

1	Add drawLength for lines and drawcoords for Point constants

0 	Change input buttons to constants that I can change

0 	Drawing 3d.



0	Addd moving points feature: given coordinates, we should be able to move the point in those coordinates depending on mouse cursor input. Kepp in mind: only one point exists in our spatial hashing grid, we can use that.
This feature might need us to manually link PointManager and LineManager together, since moving a point should also move all lines connected to it. 
Current Idea: create a common manager that takes in both, and for each method, it calls the right methods in each, and when we move a point, we also move all lines connected to it using a similar approach to that we used in "RemoveAllLinesWithPoint()" (I forgot the exact name)

0 Add Depth FOV, consider looking into why engines use point system (x,y,z,w)

