TODO : 
-1	Add Input Field inheritance.   I don't want to add this
-1	ADD THREADS TO DRAWING LOGIC TO BOOST PERFORMANCE.  	FAILED - no can do


1	Add text on midpoint functionality:
	add:   DONE
	FIX DRAWING RECTANGLE INSTEAD OF TEXT BUG. DONE
	
1 	Add rotating using right mouse button.   	DONE


1 	This came back again"	FIX DRAWING RECTANGLE INSTEAD OF TEXT BUG. DONE", but this time it is only for DRAWING THE COORDS OF POINTS in shapes deriving from shape class.
					this is weird, I don't have time to look through it now. will need to fix it later.   DONE


1 	FIX: On left mouse button hold, all other points (NOT including Points deriving from shape class) change their color to the last color we got from the RGB inputs.  DONE


1	The code Needs HEAVY reactoring, it works but it is getting closer to being spaghetti, here is the architecture I am thinking about currently:
					# Global parameters in Utilities.h
					# Base functions in myFunctions.h
					# Base classes and interfaces in myClasses.h
					# InputFields.h and InputFields.cpp as is

1	Add flush screen drawings button. DONE


1	Add memory manager. DONE

1	Add drawLength for lines and drawcoords for Point constants

1 	Change input buttons to constants that I can change

0 	Drawing 3d.



0	Add moving points feature: given coordinates, we should be able to move the point in those coordinates depending on mouse cursor input. Keep in mind: only one point exists in our spatial hashing grid, we can use that.
This feature might need us to manually link PointManager and LineManager together, since moving a point should also move all lines connected to it. 
Current Idea: create a common manager that takes in both, and for each method, it calls the right methods in each, and when we move a point, we also move all lines connected to it using a similar approach to that we used in "RemoveAllLinesWithPoint()" (I forgot the exact name)
Additional planning: 
- Define PointLineManager class. make it inherit from IEachFrame and IDeletable and IFlushable. Done
- Initialize it in Initialize Managers, make its EachFrame function call PointManager and LineManager EachFrame, since it will now control them. Done
- Define the interfaces methods. Done
- Define the method "MovePointLines": Call PointManager::MovePoint, get the returned pair then call LineManager::MoveLinesWithPoint. Done
- Define the input methods, this will have to change when I integrate my own event system. Done

Changes to PointManager:			DONE
- Define the method "MovePoint": this method should take as an input (old, new), where old is the point we want to move and new is the point we want to move it to. One good looking implementation is just to do "remove(old); insert(new);" since we already deal with points existing in the same new point in the insert method.

Changes to LineManager:				DONE
- Define the method "MoveLinesWithPoint": this method should take as an input (old, new), where old is the point we want to move all lines connected to it, and new is the point we want to move the lines to. 

This approach comes up with 1 big problem: We need to use the spatial hashing grid in PointManager, so that LineManager can know if the point old and new intersect with any other point.
SOLVED:
- My current solution: in PointLineManager::MovePointLines, we call PointManager::MovePoint, and this method knows everything, since it needs the information about intersecting points in order to move the point correctly, so all we have to do is save the point intersecting with old and the point intersecting with new in a pair, and to just return the pair to PointLineManager, Then, we can just feed the pair to LineManager::MoveLinesWithPoint.  		
I think this would work great.

ALL DONE, BUT ONE MINOR ISSUE:
After adding the moving points and lines feature, I was greeted with another small bug: because I took the lines as static when I added the length text feature, when we move a line, the text draws at the old spot.
- Define UpdateMidPoint method in Line struct
- Update LineManager::MoveLinesWithPoint method: While moving lines, after changing one point of a lines, call UpdateMidPoint 		DONE


0 	Add Depth FOV, consider looking into why engines use point system (x,y,z,w)

1	Add scrollbar to decide which shape we want to draw, update ShapeManager accordingly:
 	1 DONE:	"ALMOST DONE: still need to respond to handle user selecting shape logic."

1	Add initialization to none to scrollbar

